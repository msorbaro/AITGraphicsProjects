Shader.source[document.currentScript.src.split('js/shaders/')[1]] = `#version 300 es
  precision highp float;

  in vec3 rayDir;
  uniform vec3 eyePosition;
  uniform samplerCube envmap;
  uniform mat4 quadrics[128];
  uniform vec4 brdfs[128];
  uniform vec4 lightPos[3];
  uniform vec4 lightPowerDensity[3];


  out vec4 fragmentColor;

  float intersectQuadric(mat4 A, vec4 e, vec4 d){
    float a = dot(d*A, d);
    float b = dot(d*A, e) + dot(e*A, d);
    float c = dot(e*A, e);

    float discriminant = b*b - 4.0*a*c;

    if(discriminant < 0.0){
      return -1.0;
    }

    float t1 = (-1.0*b + sqrt(discriminant))/(2.0*a);
    float t2 = (-1.0*b - sqrt(discriminant))/(2.0*a);

    return (t1<0.0)?t2:((t2<0.0)?t1:min(t1, t2));

  }

  float noise(vec3 r) {
      vec3 s = vec3(7502, 22777, 4767);
      float f = 0.0;

    for(int i=0; i<16; i++) {
        f += sin( dot(s - vec3(32768, 32768, 32768), r * 40.0) / 65536.0);
        s = mod(s, 32768.0) * 2.0 + floor(s / 32768.0);
      }

    return f / 32.0 + 0.5;
}

vec3 getColor( vec3 position) {

    float  scale = 15.0;
    float turb = 500.0;
    float period = 20.0;
    float sharpness = 40.0;

    float w =
      position.x * period + pow(noise(position * scale), sharpness)*turb;
      w -= floor(w);
      return	vec3(1, 0.4, 0) * w +  vec3(0.4, 0.1, 0.04) * (1.0-w);

}

  float intersectClippedQuadric(mat4 A, mat4 B, vec4 e, vec4 d){
    float a = dot(d*A, d);
    float b = dot(d*A, e) + dot(e*A, d);
    float c = dot(e*A, e);

    float discriminant = b*b - 4.0*a*c;

    if(discriminant < 0.0){
      return -1.0;
    }

    //compute intersection

    float t1 = (-1.0*b + sqrt(discriminant))/(2.0*a);
    float t2 = (-1.0*b - sqrt(discriminant))/(2.0*a);

    vec4 r1 = e + (d * t1);
    vec4 r2 = e + (d * t2);

    float intersect1 = dot(r1*B, r1);
    float intersect2 = dot(r2*B, r2);

    if(intersect1 > 0.0 && intersect2 > 0.0){
      return -1.0;
    }

    if(intersect1 > 0.0){
      return t2;
    }
    if(intersect2 > 0.0){
      return t1;
    }

    return (t1<0.0)?t2:((t2<0.0)?t1:min(t1, t2));
  }

  float intersectPinkedQuadric(mat4 A, mat4 B, vec4 e, vec4 d) {
    float a = dot(d * A, d);
    float b = dot(d * A, e) + dot(e * A, d);;
    float c = dot(e * A, e);
    float disc = b*b-4.0*a*c;
    if (disc < 0.0) {
      return -1.0;
      }
    float t1 = (-b + sqrt(disc)) / (2.0*a);
    float t2 = (-b - sqrt(disc)) / (2.0*a);
    vec4 r1 = e + d * t1;
    vec4 r2 = e + d * t2;
    float root1 = dot(r1 * B, r1);
    float root2 = dot(r2 * B, r2);
    if ((root1 > 0.0 || (fract(r1.x*5.0)) < 0.5) && (root2 > 0.0 || (fract(r2.x*5.0)) < 0.5)) {
      return -1.0;
      }
      if (root1 > 0.0 || (fract(r1.x*5.0)) < 0.5) {
        return t2;
      }
      if (root2 > 0.0 || (fract(r2.x*5.0)) < 0.5) {
        return t1;
      }
      return (t1<0.0)?t2:((t2<0.0)?t1:min(t1, t2));
    }

  bool findBestHit(vec4 e, vec4 d, out float bestT, out int bestBrdf, out mat4 bestA){
    bestT = 900.0;
    for(int i = 0; i < 128; i++){
      mat4 currQuadric = quadrics[i];
      mat4 currClipper = quadrics[i+1];
      float currT = intersectClippedQuadric(currQuadric, currClipper, e, d);

      if(currT < bestT && currT > 0.0){
        bestT = currT;
        bestA = currQuadric;
        bestBrdf = i;
      }

      i++;
    }


    if(bestT < 900.0){
      return true;
    }

    return false;
  }



  vec4 pointOnRay(vec4 e, vec4 d, float t){
    vec4 r = e + (d * t);
    return r;
  }

  vec3 noiseGrad(vec3 r) {
    vec3 s = vec3(7502, 22777, 4767);
    vec3 f = vec3(0.0, 0.0, 0.0);
    for(int i=0; i<16; i++) {
      f += cos( dot(s - vec3(32768, 32768, 32768), r*40.0)
                     / 65536.0) * (s - vec3(32768, 32768, 32768)) * 40.0;
      s = mod(s, 32768.0) * 2.0 + floor(s / 32768.0);
    }
    return f / 65536.0;
  }

  bool findShadowHit(vec4 e, vec4 d, out float bestT, out int bestBrdf, out mat4 bestA) {
    bestT = 9000.0;
    bestBrdf = -1;
    bestA = quadrics[0];
    for (int i = 0; i < 19; i++) {
      float t = intersectClippedQuadric(quadrics[i], quadrics[i+1], e, d);
      if (t < bestT && t > 0.0) {
        bestT = t;
        bestBrdf = i;
        bestA = quadrics[i];
      }
      i++;
    }
    if (bestT < 9000.0) {
      return true;
    }
    return false;
  }

void main(void) {


  	vec4 e = vec4(eyePosition, 1);			       //< ray origin
  	vec4 d = vec4(normalize(rayDir), 0);	     //< ray direction


    mat4 A = mat4(1, 0, 0, 0,
    0, 1, 0, 0,
    0, 0, 1, 0,
    0, 0, 0, -9 );

    mat4 B = mat4(  1, 0, 0, 0,
    0, 0, 0, 0,
    0, 0, 0, 0,
    0, 0, 0, -4);

    float bestT;
    int bestBrdf;
    mat4 bestA;

    if(!findBestHit(e, d, bestT, bestBrdf, bestA)){
      fragmentColor = texture(envmap, d.xyz);
    }
    else{
      vec4 point = pointOnRay(e,d,bestT);
      vec3 normal = normalize((point*bestA + bestA* point).xyz);

      //shadows

      if(bestBrdf == 2){
        vec4 point = pointOnRay(e,d,bestT); //hit
        vec3 normal = normalize((point*bestA + bestA* point).xyz);
        vec4 shadowRayDir = vec4(normalize(vec3 (1, 1, 1)), 0);
        fragmentColor.rgb += ( dot(normal, shadowRayDir.xyz) * getColor(point.xyz));
        fragmentColor.rgb += vec3(.7, .6, .97);
      }

      for (int i = 0; i < 3; i++){
        if(dot(normal, d.xyz) > 0.0){
          normal = -normal;
        }

        vec3 Munit = lightPowerDensity[i].rgb;
        vec3 y = lightPos[i].xyz;
        //vec3 light = (y - normal * lightPos[i].w);

        vec3 light = (y - point.xyz * lightPos[i].w);
        vec3 M = Munit/dot(light, light);
        light = normalize(light);
        vec3 ks = vec3(5, 5, 5);
        vec3 v = normalize(eyePosition - point.xyz);
        vec3 h = normalize(v+light);


        if (bestBrdf == 0 || bestBrdf == 2 || bestBrdf == 4 || bestBrdf == 6 || bestBrdf == 8 || bestBrdf == 10 || bestBrdf == 2){
          fragmentColor.rgb += (M * brdfs[bestBrdf].xyz * max(dot(normal, light), 0.0) + (M * ks* pow(max(dot(normal, h), 0.0), 50.0) ) );
        }
        else {
          fragmentColor.rgb +=  brdfs[bestBrdf].xyz;
        }

      }

      //modify normal wiht the bestbrdf if we have a specific shading we want to use
      //how to shade, red or green or mirror, etc.
      //fragmentColor = vec4(normal, 1.0)*brdfs[bestBrdf];



    fragmentColor = vec4(fragmentColor.rgb, 1.0);
    }

  }
`;
